// Copyright (c) Microsoft Corporation. All rights reserved.

// <auto-generated/>
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.OmniChannel.Adapter.Builder;
using Microsoft.OmniChannel.Adapters.Line;
using Microsoft.OmniChannel.Adapters.MessageBird;
using Microsoft.OmniChannel.MessageRelayProcessor;
using Newtonsoft.Json.Serialization;
using NLog.Extensions.Logging;
using System.Collections.Generic;

namespace Microsoft.OmniChannel.Adapters.Service
{
    public class Startup
    {
        public static IConfigurationRoot Configuration { get; private set; }

        public Startup(IHostingEnvironment env)
        {
            if (env == null)
            {
                return;
            }

            var builder = new ConfigurationBuilder()
                .SetBasePath(env.ContentRootPath)
                .AddJsonFile("appSettings.json", false, true);

            Configuration = builder.Build();
        }

        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit https://go.microsoft.com/fwlink/?LinkID=398940
        public static void ConfigureServices(IServiceCollection services)
        {
            services.AddMvc()
                .AddJsonOptions(o =>
                {
                    switch (o.SerializerSettings.ContractResolver)
                    {
                        case DefaultContractResolver castedResolver:
                            castedResolver.NamingStrategy = null;
                            break;
                    }
                });

            services.Configure<LineAdapterConfiguration>(Configuration.GetSection("LineAdapterSettings"));
            services.Configure<MessageBirdAdapterConfiguration>(Configuration.GetSection("MessageBirdAdapterSettings"));
            services.Configure<RelayProcessorConfiguration>(Configuration.GetSection("RelayProcessorSettings"));

            services.AddSingleton<LineAdapter>();
            services.AddSingleton<MessageBirdAdapter>();
            services.AddTransient<IRelayProcessor, RelayProcessor>();

            services.AddSingleton<AdapterServiceResolver>(serviceProvider => key =>
            {
                switch (key)
                {
                    case ChannelType.Line:
                        return serviceProvider.GetService<LineAdapter>();
                    case ChannelType.MessageBird:
                        return serviceProvider.GetService<MessageBirdAdapter>();
                    default:
                        throw new KeyNotFoundException();
                }
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, ILoggerFactory loggerFactory)
        {
            var logProvider = new NLogLoggerProvider();
            try
            {
                loggerFactory.AddConsole();
                loggerFactory.AddDebug(LogLevel.Information);
                loggerFactory?.AddProvider(logProvider);
                app.UseMvc();
                var options = new DefaultFilesOptions();
                options.DefaultFileNames.Clear();
                options.DefaultFileNames.Add("default.htm");
                app.UseDefaultFiles(options);
                app.UseStaticFiles();
            }
            finally
            {
                logProvider.Dispose();
            }
        }
    }
}
