// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Collections.Generic;
using System.Linq;
using DataExportSales.Models;
using Microsoft.Rest;
using Newtonsoft.Json.Linq;

namespace DataExportSales.Models
{
    public partial class EntityDetailsDTO
    {
        private DateTimeOffset? _initialSyncDataCompletedTime;
        
        /// <summary>
        /// Optional. InitialSync Data Completed Time
        /// </summary>
        public DateTimeOffset? InitialSyncDataCompletedTime
        {
            get { return this._initialSyncDataCompletedTime; }
            set { this._initialSyncDataCompletedTime = value; }
        }
        
        private DateTimeOffset? _initialSyncMetadataCreatedTime;
        
        /// <summary>
        /// Optional. InitialSync Metadata Created Time
        /// </summary>
        public DateTimeOffset? InitialSyncMetadataCreatedTime
        {
            get { return this._initialSyncMetadataCreatedTime; }
            set { this._initialSyncMetadataCreatedTime = value; }
        }
        
        private DateTimeOffset? _initialSyncProcessCompleteTime;
        
        /// <summary>
        /// Optional. Initial Sync Process Complete Time
        /// </summary>
        public DateTimeOffset? InitialSyncProcessCompleteTime
        {
            get { return this._initialSyncProcessCompleteTime; }
            set { this._initialSyncProcessCompleteTime = value; }
        }
        
        private DateTimeOffset? _lastDeltaSyncDataTime;
        
        /// <summary>
        /// Optional. Last DeltaSync Data Time
        /// </summary>
        public DateTimeOffset? LastDeltaSyncDataTime
        {
            get { return this._lastDeltaSyncDataTime; }
            set { this._lastDeltaSyncDataTime = value; }
        }
        
        private DateTimeOffset? _lastDeltaSyncMetadataTime;
        
        /// <summary>
        /// Optional. Last DeltaSync Metadata Time
        /// </summary>
        public DateTimeOffset? LastDeltaSyncMetadataTime
        {
            get { return this._lastDeltaSyncMetadataTime; }
            set { this._lastDeltaSyncMetadataTime = value; }
        }
        
        private IDictionary<string, string> _settings;
        
        /// <summary>
        /// Optional. Property bag
        /// </summary>
        public IDictionary<string, string> Settings
        {
            get { return this._settings; }
            set { this._settings = value; }
        }
        
        private EntityExportStatusDescription _status;
        
        /// <summary>
        /// Optional. Status details
        /// </summary>
        public EntityExportStatusDescription Status
        {
            get { return this._status; }
            set { this._status = value; }
        }
        
        private string _type;
        
        /// <summary>
        /// Optional. Entity type
        /// </summary>
        public string Type
        {
            get { return this._type; }
            set { this._type = value; }
        }
        
        /// <summary>
        /// Initializes a new instance of the EntityDetailsDTO class.
        /// </summary>
        public EntityDetailsDTO()
        {
            this.Settings = new LazyDictionary<string, string>();
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken initialSyncDataCompletedTimeValue = inputObject["InitialSyncDataCompletedTime"];
                if (initialSyncDataCompletedTimeValue != null && initialSyncDataCompletedTimeValue.Type != JTokenType.Null)
                {
                    this.InitialSyncDataCompletedTime = ((DateTimeOffset)initialSyncDataCompletedTimeValue);
                }
                JToken initialSyncMetadataCreatedTimeValue = inputObject["InitialSyncMetadataCreatedTime"];
                if (initialSyncMetadataCreatedTimeValue != null && initialSyncMetadataCreatedTimeValue.Type != JTokenType.Null)
                {
                    this.InitialSyncMetadataCreatedTime = ((DateTimeOffset)initialSyncMetadataCreatedTimeValue);
                }
                JToken initialSyncProcessCompleteTimeValue = inputObject["InitialSyncProcessCompleteTime"];
                if (initialSyncProcessCompleteTimeValue != null && initialSyncProcessCompleteTimeValue.Type != JTokenType.Null)
                {
                    this.InitialSyncProcessCompleteTime = ((DateTimeOffset)initialSyncProcessCompleteTimeValue);
                }
                JToken lastDeltaSyncDataTimeValue = inputObject["LastDeltaSyncDataTime"];
                if (lastDeltaSyncDataTimeValue != null && lastDeltaSyncDataTimeValue.Type != JTokenType.Null)
                {
                    this.LastDeltaSyncDataTime = ((DateTimeOffset)lastDeltaSyncDataTimeValue);
                }
                JToken lastDeltaSyncMetadataTimeValue = inputObject["LastDeltaSyncMetadataTime"];
                if (lastDeltaSyncMetadataTimeValue != null && lastDeltaSyncMetadataTimeValue.Type != JTokenType.Null)
                {
                    this.LastDeltaSyncMetadataTime = ((DateTimeOffset)lastDeltaSyncMetadataTimeValue);
                }
                JToken objectDictionary = ((JToken)inputObject["Object"]);
                if (objectDictionary != null && objectDictionary.Type != JTokenType.Null)
                {
                    foreach (JProperty property in objectDictionary)
                    {
                        this.Settings.Add(((string)property.Name), property.Value.ToString(Newtonsoft.Json.Formatting.Indented));
                    }
                }
                JToken statusValue = inputObject["Status"];
                if (statusValue != null && statusValue.Type != JTokenType.Null)
                {
                    EntityExportStatusDescription entityExportStatusDescription = new EntityExportStatusDescription();
                    entityExportStatusDescription.DeserializeJson(statusValue);
                    this.Status = entityExportStatusDescription;
                }
                JToken typeValue = inputObject["Type"];
                if (typeValue != null && typeValue.Type != JTokenType.Null)
                {
                    this.Type = ((string)typeValue);
                }
            }
        }
        
        /// <summary>
        /// Serialize the object
        /// </summary>
        /// <returns>
        /// Returns the json model for the type EntityDetailsDTO
        /// </returns>
        public virtual JToken SerializeJson(JToken outputObject)
        {
            if (outputObject == null)
            {
                outputObject = new JObject();
            }
            if (this.InitialSyncDataCompletedTime != null)
            {
                outputObject["InitialSyncDataCompletedTime"] = this.InitialSyncDataCompletedTime.Value;
            }
            if (this.InitialSyncMetadataCreatedTime != null)
            {
                outputObject["InitialSyncMetadataCreatedTime"] = this.InitialSyncMetadataCreatedTime.Value;
            }
            if (this.InitialSyncProcessCompleteTime != null)
            {
                outputObject["InitialSyncProcessCompleteTime"] = this.InitialSyncProcessCompleteTime.Value;
            }
            if (this.LastDeltaSyncDataTime != null)
            {
                outputObject["LastDeltaSyncDataTime"] = this.LastDeltaSyncDataTime.Value;
            }
            if (this.LastDeltaSyncMetadataTime != null)
            {
                outputObject["LastDeltaSyncMetadataTime"] = this.LastDeltaSyncMetadataTime.Value;
            }
            if (this.Settings != null)
            {
                if (this.Settings is ILazyCollection<KeyValuePair<string, string>> == false || ((ILazyCollection<KeyValuePair<string, string>>)this.Settings).IsInitialized)
                {
                    JObject objectDictionary = new JObject();
                    outputObject["Object"] = objectDictionary;
                    foreach (KeyValuePair<string, string> pair in this.Settings)
                    {
                        string objectKey = pair.Key;
                        string objectValue = pair.Value;
                        if (objectValue != null)
                        {
                            objectDictionary[objectKey] = JObject.Parse(objectValue);
                        }
                    }
                }
            }
            if (this.Status != null)
            {
                outputObject["Status"] = this.Status.SerializeJson(null);
            }
            if (this.Type != null)
            {
                outputObject["Type"] = this.Type;
            }
            return outputObject;
        }
    }
}
