// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Rest;

namespace DataExportSales
{
    public partial interface IMetadata
    {
        /// <param name='organizationUrl'>
        /// Required. The organization url
        /// </param>
        /// <param name='organizationId'>
        /// Required. The organization ID
        /// </param>
        /// <param name='isAuthorized'>
        /// Required. The isAuthorized parameter
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> AcceptOrgPrivacyTermsWithOperationResponseAsync(string organizationUrl, string organizationId, bool isAuthorized, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='organizationUrl'>
        /// Required. Organization URL
        /// </param>
        /// <param name='organizationId'>
        /// Required. Organization Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetConnectorDetailsWithOperationResponseAsync(string organizationUrl, string organizationId, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='organizationUrl'>
        /// Required. Organization URL
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetEntitiesWithOperationResponseAsync(string organizationUrl, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOrganizationsWithOperationResponseAsync(CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='organizationUrl'>
        /// Required. Organization URL
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetOrgDetailsWithOperationResponseAsync(string organizationUrl, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='organizationUrl'>
        /// Required. Organization URL
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> GetRelationshipsWithOperationResponseAsync(string organizationUrl, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        
        /// <param name='organizationId'>
        /// Required. The organization ID
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        Task<HttpOperationResponse<object>> HasOrgAcceptedPrivacyTermsWithOperationResponseAsync(string organizationId, CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    }
}
