// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using DataExportSales;
using DataExportSales.Models;
using Microsoft.Rest;

namespace DataExportSales
{
    public static partial class ProfilesExtensions
    {
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        public static object Activate(this IProfiles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).ActivateAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ActivateAsync(this IProfiles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ActivateWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        public static object ActivateData(this IProfiles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).ActivateDataAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ActivateDataAsync(this IProfiles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ActivateDataWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        public static object ActivateMetadata(this IProfiles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).ActivateMetadataAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ActivateMetadataAsync(this IProfiles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ActivateMetadataWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='registration'>
        /// Required. Description of the new Profile to be created
        /// </param>
        public static object CreateProfile(this IProfiles operations, ProfileDescriptionBase registration)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).CreateProfileAsync(registration);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='registration'>
        /// Required. Description of the new Profile to be created
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> CreateProfileAsync(this IProfiles operations, ProfileDescriptionBase registration, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.CreateProfileWithOperationResponseAsync(registration, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        public static object Deactivate(this IProfiles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).DeactivateAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeactivateAsync(this IProfiles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeactivateWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        public static object DeleteProfileById(this IProfiles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).DeleteProfileByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> DeleteProfileByIdAsync(this IProfiles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.DeleteProfileByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='status'>
        /// Optional. Include Profile Status
        /// </param>
        public static object GetProfileById(this IProfiles operations, string id, bool? status = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).GetProfileByIdAsync(id, status);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='status'>
        /// Optional. Include Profile Status
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetProfileByIdAsync(this IProfiles operations, string id, bool? status = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetProfileByIdWithOperationResponseAsync(id, status, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        public static object GetProfileFailuresInfoById(this IProfiles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).GetProfileFailuresInfoByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetProfileFailuresInfoByIdAsync(this IProfiles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetProfileFailuresInfoByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='organizationId'>
        /// Required. Organization Id
        /// </param>
        /// <param name='status'>
        /// Optional. Include Profile Status
        /// </param>
        public static object GetProfilesByOrganizationId(this IProfiles operations, string organizationId, bool? status = null)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).GetProfilesByOrganizationIdAsync(organizationId, status);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='organizationId'>
        /// Required. Organization Id
        /// </param>
        /// <param name='status'>
        /// Optional. Include Profile Status
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetProfilesByOrganizationIdAsync(this IProfiles operations, string organizationId, bool? status = null, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetProfilesByOrganizationIdWithOperationResponseAsync(organizationId, status, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        public static object GetTestResultById(this IProfiles operations, string id)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).GetTestResultByIdAsync(id);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> GetTestResultByIdAsync(this IProfiles operations, string id, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.GetTestResultByIdWithOperationResponseAsync(id, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='updatedProfile'>
        /// Required. Description of updates to the Profile
        /// </param>
        public static object UpdateProfile(this IProfiles operations, string id, ProfileDetailsDTO updatedProfile)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).UpdateProfileAsync(id, updatedProfile);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='id'>
        /// Required. Profile Id
        /// </param>
        /// <param name='updatedProfile'>
        /// Required. Description of updates to the Profile
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> UpdateProfileAsync(this IProfiles operations, string id, ProfileDetailsDTO updatedProfile, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.UpdateProfileWithOperationResponseAsync(id, updatedProfile, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='registration'>
        /// Required. Description of the new Profile to be created
        /// </param>
        public static object ValidateBeforeProfileCreation(this IProfiles operations, ProfileDescriptionBase registration)
        {
            return Task.Factory.StartNew((object s) => 
            {
                return ((IProfiles)s).ValidateBeforeProfileCreationAsync(registration);
            }
            , operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
        }
        
        /// <param name='operations'>
        /// Reference to the DataExportSales.IProfiles.
        /// </param>
        /// <param name='registration'>
        /// Required. Description of the new Profile to be created
        /// </param>
        /// <param name='cancellationToken'>
        /// Cancellation token.
        /// </param>
        public static async Task<object> ValidateBeforeProfileCreationAsync(this IProfiles operations, ProfileDescriptionBase registration, CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Microsoft.Rest.HttpOperationResponse<object> result = await operations.ValidateBeforeProfileCreationWithOperationResponseAsync(registration, cancellationToken).ConfigureAwait(false);
            return result.Body;
        }
    }
}
